#!/usr/bin/env python
import urllib, json, requests, urllib3, boto3, sys, argparse
from botocore.exceptions import ClientError

local_path = '<%= $tmp_dir %>/content-healthcheck-descriptor.json'
session = boto3.session.Session()
region = session.region_name

# Get arguments for protocol and port number.
# If these are not passed, http and 4503 will be used by default.
parser = argparse.ArgumentParser(description='Process the protocol and port number.')
parser.add_argument('protocol', nargs='?', type=str, default='http', help='a protocol of type http or https.', choices=['https', 'http'])
parser.add_argument('port', nargs='?', type=str, default='4503', help='a port number. e.g. 4503')
args = parser.parse_args()

def main():
    download_file_from_s3();
    response = urllib.urlopen(local_path)
    resp_str = json.loads(response.read())
    traverse_descriptor(resp_str)

# Retrive the instance id from metadata
def get_instance_id():
    response = requests.get('http://169.254.169.254/latest/meta-data/instance-id')
    instance_id = response.text
    return str(instance_id)

# Retrives an instance tag
# The Key is given as a parameter and the value is returned
def get_instance_tag(tag_key):
    instance_id = get_instance_id()
    ec2 = boto3.resource('ec2')
    try:
        ec2_instance = ec2.Instance(instance_id)
        tag_value = ''
        for tags in ec2_instance.tags:
            if tags["Key"] == tag_key:
                tag_value = tags["Value"]
        return tag_value
    except ClientError as e:
        print 'The ec2 instance' + instance_id + ' is unreachable. Error: ' + str(e)
        sys.exit(1)

# Downloads descriptor file from an s3 bucket into a local tmp folder
def download_file_from_s3():
    bucket_key = '<%= $stack_prefix %>/content-healthcheck-descriptor.json'
    s3 = boto3.client('s3')
    try:
        s3.download_file('<%= $data_bucket %>', bucket_key, local_path)
    except ClientError as e:
        # If a client error is thrown, then check that it was a 404 error.
        # If it was a 404 error, then the bucket does not exist.
        error_code = int(e.response['Error']['Code'])
        if error_code == 404:
            print 'The descriptor file ' + bucket_key + ' is missing. Error: ' + str(e)
        else:
            print 'The data bucket path ' + bucket_key + ' is unreachable. Error: ' + str(e)
        sys.exit(1)

# Loops through the descriptor file in search of all the content paths
def traverse_descriptor(instances):
    for packages in instances["publish-dispatcher"]["packages"]:
        for content in packages["content"]:
            global endpoint
            endpoint = content
            submit_request(content)

# Submits the request to the given content path
# If there is an error, it will count as an unhealthy metric
def submit_request(path):
    publish_host = get_instance_tag('PublishHost')
    url = args.protocol + '://' + publish_host + ':' + args.port + path
    try:
        r = requests.get(url, verify=False, timeout=30)
        process_response(r)
    except requests.exceptions.RequestException as e:
        print 'The content path ' + publish_host + ' is unreachable. Error: ' + str(e)
        send_to_cloudwatch(0)
        sys.exit(1)

# If the response status code is 200 it will send a healthy status.
# Anything different from a 200 will result in unhealthy status.
def process_response(response):
    print response.status_code
    if response.status_code == requests.codes.ok:
        send_to_cloudwatch(1)
    else:
        send_to_cloudwatch(0)

# Sends cutom metric to cloudwatch with the following dimensions:
# instance_id which is the distpacher Id, PairInstanceId which is the publisher Id, and the Endpoint which is the actual content path
# Prints the status of the the current content path
def send_to_cloudwatch(status):
    dispatcher_id = get_instance_id()
    publisher_id = get_instance_tag('PairInstanceId')
    cw = boto3.client('cloudwatch', region_name=region)
    namespace = get_instance_tag('aws:cloudformation:stack-name')
    name = 'contentHealthCheck'
    dimensions = [{'Name': 'InstanceId','Value': dispatcher_id},{'Name': 'PairInstanceId','Value': publisher_id},{'Name': 'Endpoint','Value': endpoint}]
    metric_data = { 'MetricName': name, 'Dimensions': dimensions, 'Value': status, 'Unit': 'Count' }
    try:
        cw_response = cw.put_metric_data(Namespace=namespace, MetricData=[ metric_data ])
        message = 'The content path ' + endpoint + ' in the publisher instance ' + publisher_id + ' is '
        if status == 1:
            print message + 'healthy.'
        else:
            print message + 'unhealthy.'
    except ClientError as e:
        print 'The cloudwatch instance is unreachable. Error: ' + str(e)
        sys.exit(1)

if __name__ == "__main__":
    main()
